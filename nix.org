* Dictionary
** Profile
A general and convenient concept for realizing rollbacks.
** Database
/nix/var/nix/db/db.sqlite

Keeps track of the dependencies between derivations.

Made up of multiple "generations".
* Operator
Boolean - ||, &&, !, builtins.div.
Relational - !=, ==, <, >, <=, >=.
e1 // e2 - e2 shadows values from e1
* Type
Simple types:
 * Integer
 * Floating point
 * String
 * Path
 * Boolean
 * Null
Complex types:
 * List
 * Set
s = { foo = "bar"; a-b = "str"; "key" = "value"; }
Access key/value: s.a-b
   * Argument set
mul = { a, b }
   * Recursive set
rec { a = "val"; b = "val"; }
** Function
*** if
*** let
Define local variables for inner expression.
*** with
Include includes attrribute set into expression.
*** lambda
**** One argument
x: x*2
**** Several arguments
y: (x: x*y)
**** Variadic arguments
mul = { a, b, ... }: a*b
* Built-in function
currentSystem
isAttrs
attrNames
toString
* removeReferencesTo
Forces remove of the dependency. Even if Nix filter does not reduce dependency after compilation.
* Useful commands
** Show direct runtime dependencies
#+begin_src fish
nix-store -q --references "$(command -v bassename)"
#+end_src

** Show reverse dependencies
#+begin_src fish
nix-store -q --referrers "$(command -v basename)"
#+end_src

** Show catamorphed closure
#+begin_src fish
nix-store -qR "$(command -v bassename)"
#+end_src

** Show tree of closure
#+begin_src fish
nix-store -q --tree "$(command -v basename)"
#+end_src

** Recovering making rollback from store directory
#+begin_src fish
/nix/store/<hash>-nix-<ver>/bin/nix-env --rollback
#+end_src

** Recover with reinstall from store directory
#+begin_src fish
/nix/store/<hash>-nix-<ver>/bin/nix-env -i /nix/store/<hash>-nix-<ver>
#+end_src

** Show all derivation dependencies sorted by their closure size
#+begin_src fish
nix path-info --json -rS *store path* | jq 'map(select(.closureSize > 1e6)) | sort_by(.closureSize) | map([.path, .closureSize/1e6])'
#+end_src
** Show all derivation dependencies sorted by their output size
#+begin_src fish
nix path-info --json -rs *store path* | jq 'map(select(.narSize > 1e6)) | sort_by(.narSize) | map([.path, .narSize/1e6])'
#+end_src
** Show all closure dependencies in a tree form
#+begin_src fish
nix-store -q --tree *store path*
#+end_src
** Build derivation from local NixPkgs description
#+begin_src fish
nix-build {/home/pyro/src/nixpkgs} -A *attrName*
#+end_src
** Get total closure size
#+begin_src fish
nix-store -qR *store path* | xargs du -s | cut -f 1 | xargs | sed -e 's/ /+/g'|bc
#+end_src
** Enter nix-shell environment to test/work with package
#+begin_src fish
nix-shell {/home/pyro/src/nixpkgs} -A *attrName*
#+end_src
As comands enter next phases:
*** unpackPhase
*** cd *folder*
*** patchPhase
*** configurePhase
*** buildPhase
** Build depending closures with nox-review
#+begin_src fish
nix-shell -p nox --run "nox-review wip"    # tests uncommited changes
nix-shell -p nox --run "nox-review wip --against *the previous to changes commit*"
nix-shell -p nox --run "nox-review pr *id*"    # very slow, clones NixPkgs
#+end_src
** Run tests for package
For current system <nixpkgs>, using NIX_PATH:
#+begin_src fish
nix-build '<nixpkgs/nixos/tests/login.nix>'
#+end_src

For running selected nix derivation / test from Git NixPkgs repo:
#+begin_src fish
cd ~/src/nixpkgs/..
nix-build test.nix
#+end_src

It runs against the current Git repo.
** To try the app without installing
   #+begin_src fish
   nix run nixpkgs.nix-review
   #+end_src
* Developing/debugging package
** Set: enableParallelBuilding -> false, - so log output would be syncronized
** Write-down initial size of closure with: nix path-info -S /nix/store/hash-package
** Sort the dependencies in the end, as last changes
** Before writing bug reports: dig deeper, think broadly
** Run nix-shell -p nox --run "nox-review wip --against <commithash>" to test-build dependent packages.
** Run tests before submitting pull request with cd path_to_test ;and nix-build <test-file.nix>
** Debug flags for make (put it in buildFlags section)
make --debug=FLAGS

where flags can be:

    a for all debugging (same as make -d and make --debug).
    b for basic debugging.
    v for slightly more verbose basic debugging.
    i for implicit rules.
    j for invocation information.
    m for information during makefile remakes.

** Build isolation on Hydra
Sandboxing allows to solve cuncerrect bind of the same port on several build packages tests.

NixOS now has default: sandboxes enabled.

It is possible to enable sandboxing on Multiuser installations of Nix.

Sandboxing has OS API similar to container APIs (like, Docker).

Sandbox is strict.
** Sandbox components
  * (No cgroups, cgroups is to limit how much resources process can use)
*** Build chroot
#+begin_src fish
/
 build/
       env-vars/
       projectName/
 usr/bin/env
 bin/sh
 etc/
     group
     hosts
     passwd
 proc/..
 dev/..
 nix/store/ # Build closure <-Bind-mount-[ Host Nix store ]
#+end_src
*** Sandbox namespacing
  * Network namespacing - private loopback device
  * IPC namespacing - private unix sockets/shared memory
  * UTS namespacing - private hostname: `localhost`
  * User namespacing - single user `nixbld`:1000 -Mapped-onto-> one of `nixbld`:[1-99] on the host
  * Mount namespacing - bind mounts limited to chroot
  * PID namespacing - build sees only its own processes
*** Seccomp
  * System call filter
  * Policy programs based on eBPF-vm
  * Forbids setuid binaries
  * Forbids ACL
** breakpointHook buildInputs
When the build crashes - it halts and print a command that allows to attach to the buildbox.
It attaches your system attached to the sandbox.

To go fully into the container:
#+begin_src fish
cntr exec
#+end_src
** Debug syscalls with sysdig
See [[nix-sysdig]]
* Evaluating data in REPL
#+begin_src fish
nix repl
pkgs = import <nixpkgs> {}
pkgs.config.allowUnfree
#-> true
#+end_src

* Utils
** Define Nix dependencies to build in nix-shell env with `nix-script` tool
** Nix-review tool to automate reviews
** niff - compares two Nix expressions and determines which attributes changed
** nix-sysdig
Debug the build, record system call trace, replay it.

`sysdig` is a Kernel tool to debug containers.
Inside the Kernel there is a `sysdig.ko`.
Kernel -> sysgig.ko -> System call trace -> sysdig

Use the wrapper `nix-sysdig`:
  * Records all system calls
  * Replay system calls on demand with filtering
  * + Add heuristics
#+begin_src fish
sudo nix-sysdig record packageName
# shell now in the package sandboxe
# manually go through the procedure to build the package
Ctrl+C - stop recording
#+end_src
* Features :drill:
:PROPERTIES:
:ID:       a92f03d4-52a5-42d5-ad45-f9ebe1c4c067
:END:
** Profiles are snapshots :drill:
:PROPERTIES:
:ID:       dd7e0293-0bd5-4ce8-ba39-394b96d1d0db
:END:
They provide rollback versioning.
** Language is purely funcitonal, with lazy evaluation. :drill:
:PROPERTIES:
:ID:       44d92141-78f1-4505-89b0-565fd57edcc0
:END:
** Everything in Nix language is an expression
** Everything is immutable
** Strongly typed, not statically typed (must do conversions to match types)
* Shortcommings :drill:
:PROPERTIES:
:ID:       ae2225e0-9322-4e9b-b506-cb79f34ee69f
:END:
*** Data format migration is your own responsibility
*** Nix on Linux uses it's own stack of everything
* Misc
** stdenvNoCC
without C compiler
** Check what closure references
#+begin_src fish
nix-store -q --references path/
#+end_src

** Sharing /nix over all nodes
* Internals
:PROPERTIES:
:ID:       569bb267-d7c9-468a-ad1d-c9086d5f4b55
:END:
** Nix uses SQLite
** ~/.nix-profile/ -> /nix/var/nix/profiles/per-user/<uname>/profile
* Tools
** Main tools
*** nix-env
Manages environment, profiles and their generations.
List generations:
#+begin_src fish
/*/ --list-generations
#+end_src

List installed derivations:
#+begin_src fish
/*/ --querry
#+end_src

Search derivations in nixpkgs:
#+begin_src fish
/*/ -qa
#+end_src

List packages installed in system profile. To search by name, run:
#+begin_src fish
/*/ -qaP

#+end_src

Rollback:
#+begin_src fish
/*/ --rollback
#+end_src

Switch to generation:
#+begin_src fish
/*/ --switch-generation <num>
#+end_src

Upgrade:
#+begin_src fish
/*/ --upgrade <packages>
/*/ --upgrade    # Everything
#+end_src

Remove:
#+begin_src fish
/*/ --uninstall <package>
/*/ --uninstall '.*'    # Everything
#+end_src

Freeze the package to hold-back, keep the current version:
#+begin_src fish
/*/ --set-flag keep true package
#+end_src

Make package a priority, to solve filename clashes:
#+begin_src fish
/*/ --set-flag priority <lower_number> package
/*/ --set-flag priority 5 binutils
/*/ --set-flag priority 10 gcc
#+end_src

*** nix repl
Read-eval-print-loop for work with Nix language.
*** nix-store
Querrying store & closures.

References (immidiate depedencies):
#+begin_src fish
/*/ --querry --references <paths>
#+end_src

Referrers (the store paths currently existing in the store that refer to one of paths):
#+begin_src fish
/*/ --querry --refererrers <paths>
#+end_src

Whole closure of referrers:
#+begin_src fish
/*/ --querry --refererrers-closure <paths>
#+end_src

Requisites (the whole closure of dependencies):
#+begin_src fish
/*/ --querry --requisites <paths>
#+end_src

=stdout= serialized data prepared for import from the store
(if =paths= refer to not includded paths - import probably would fail, for proper export see: [[nix-copy-closure]]):
#+begin_src fish
/*/ --export <paths>
#+end_src

=stdout= serialized data prepared for import to the store
(if =stdin= refers to not included | not existing path - would fail):
#+begin_src fish
/*/ --import
#+end_src

Print in the tree form, bigger closures first, recurse into paths only uniqule:
#+begin_src fish
/*/ --tree
#+end_src

*** nix-build
Build a nix expresiion.

*** nixos-rebuild

Run a dry evaluation build:
#+begin_src fish
sudo nixos-rebuild dry-build
#+end_src

Reduild to the file tree source, repo:
#+begin_src fish
sudo nixos-rebuild -I <path> build/boot/switch
#+end_src

*** nixos-option
** Cloud tools
*** nixbuild.net
*** Cachix
* Nix language
:PROPERTIES:
:ID:       e4483417-ba89-46f4-97a6-a629dff5be82
:END:
** Value types of Nix Language
*** Operation type
**** Arithmetic operation
=+ - * builtins.div=
=2/3= - is a relative [[Path]].
=a - b= - string, =a-b= - arithmetic expression.
**** Boolean
=|| && !=
**** Order
!= < > <= >= ==
*** Data type
**** Integer
**** String
String line encloses into " ".
Multi-line encloses into '' ''.
Variable inside string =${foo}=.

**** Path
Parses expression as path until slash not followed by space, so =./= - for current directory.
=2/3= - is a relative path.

***** URL
Are also [[Path]].

**** Boolean
#+begin_src nix
true
false
#+end_src

**** Null
*** Extended type
**** Function
***** Nameless lambda function :drill:
#+begin_src nix
x : x*2
#+end_src

***** Named lambda function with one parameter
#+begin_src nix
name = x : x*2
# ...
name 3
# 6
#+end_src

***** Named lambda function with many parameters :drill:
#+begin_src nix
name = a : b : a*b
# ...
name 3 7
# 21
#+end_src

***** Partial application function :drill:
#+begin_src nix
name = a : b : a*b
# ...
foo = name 4
# ...
foo 5
# 20
#+end_src

**** List :drill:
Any type: [2 "foo" true (2*3)].
Lists are immutable, it is possible to add/remove elements, but that will build and return a new list.

**** Set :drill:
Sets in Nix are association between a key (string) and expression.
#+begin_src nix
S = {
      key = "value";
      bar = "two";
      "123" = "num";
      # ; after every key-value assignment
    }
#+end_src

Sets are not argument sets used in functions.

***** Access arguments on the set
#+begin_src nix
s.key
#+end_src

***** Recursive set
#+begin_src nix
rec {
      a = 3;
      b = a + 4;
    }
#+end_src

** if expression
As in pure functional language - =if= is full.
#+begin_src nix
if a > b then "yes" else "no"
#+end_src

** let expression
#+begin_src nix-repl
let a = "value"; in a
let a = 3; b = 4; in a+b
#+end_src

Variable value can not be assined more then once.
Variable value can be shadowed by the local scope.

** with expression
#+begin_src nix
longName = {
             a = 3;
             b = 4;
           }
with longName; a+b
#+end_src

Outer scope will not be shadowed, if variable defined in outer scope, and inside the with scope.
#+begin_src nix
longName = { a = 3; b = 4; }
let a = 10; in with longName; a + b

# 14
#+end_src
* Haskell

Cabal2Nix supports the Cabals dodgy =x-revision:= field, and supplies it as =revision ==, so closure change is triggered.

Haskell packages whose Nix name (second column) begins with a haskell- prefix are packages that provide a library whereas packages without that prefix provide just executables. Librart packages may provide executables too.

** Nix shortcommings

Convention causes trouble with packages like 3dmodels and 4Blocksm situation is just unsolved and ignored.

** Maintenence
*** Regenerate ~haskellPackages~ set to observe changes

#+begin_src shell
./maintainers/scripts/haskell/regenerate-hackage-packages.sh
#+end_src

See diff.

Regenerates `pkgs/development/haskell-modules/hackage-packages.nix`

* Drafts

#+begin_src text
lib = import <nixpkgs/lib>
    nixpkgsSet = with lib; { # nixpkgsSet is the main-scope set of config keys
      EDITOR = "Elswhere user-set-value";
    } // { # Opening a work in some other set. // overrides the values only if value is reset in new set
      EDITOR = mkIf false "Override-value";
    }

:p EDITOR
#+end_src
** Updating Haskell packages in Nix

*** Hydra
**** Open
https://hydra.nixos.org/jobset/nixpkgs/haskell-updates/evals

**** Check evaluation errors

Look or general reason, like Cabal 3.2 release.

*** Editor

pkgs/development/haskell-modules/configuration-hackage2nix.yml

*** "Do we need ...(old version of package) for anything?"

#+begin_src fish
rg -R 'Cabal_3_0' pkgs
#+end_src

*** Try to just update package descriptions to new version of dependency

#+begin_src fish
rg -R -l 'Cabal_3_0' pkgs | xargs -L1 sed -i 's/Cabal_3_0/Cabal_3_2/g'
#+end_src



*** Building

#+begin_src fish
nixpkgs-build -A cabal2nix
#+end_src

#+begin_src fish
nixpkgs-build -A cabal-install
#+end_src

**** (optional) Ignore overly-restrictive upper version bounds

#+begin_src nix
packageName = super.doJailBreak packageName;
#+end_src

**** Jailbreak exploits environment and therefore hides real error messages

#+begin_src nix
cabal-install = doJailBreak super.cabal-install;
packageName = doJailBreak packageName;
#+end_src

**** Self and super

=self= - final
=super= - previous

Fudging attrs:
#+begin_src nix
self: super:
{
   package = super.package.override {
     someArg = "newValue";
   };
}
#+end_src

Fudging deps:
#+begin_src nix
self: super:
{
  package = super.package.override {
    dependency = self.dependency3;
  };
}
#+end_src

**** Override package options

#+begin_src nix
pkgs.package.override { dependency = pkgs.newdependency; }
#+end_src

**** What is overrideScope?

**** Requirements to merge haskell-updates to master

If Hydra is still building old packages.

If big projects: GHC, Cabal-install, git-annex, stack - you can merge branch into master, because it is enough - some packages may be broken but it is much enough stability.
**** Be free to merge `master` into `haskell-updates`
Peti is Ok with that.
**** Idea: Nix with types and typechecking through HNix

"Nix" library in Haskell.
"NixPkgs" library in Haskell.

And then you compile that, and out a binary that =nix-build=, =nix-env=, =nix*= do but it all that compiled-in.

Compile current =nixpkgs= into Haskell source code. Write a thin wrapper that uses =nix-store= library from Haskell to implement =nix-instantiate=. And once you have =nix-instantiate= you are basically done. That is what GUIX does.

At some point that would be essentially a fork.

=nixpkgs= database is not type-checked, but should be, it type checked dynamically. Some from Haskell point of view - =nixpkgs= should be parsed and then successfully clean it up. Nix Haskell infrastructure is completely generated, we can make that typesafe fairly easily. Typesefety spreads like a virus, make one small part of the packages typesafe and then that would spread.

At some point you would write your package database in Haskell. The code that generates the Hackage packages database now would just run as a part of Nix and generate just like that - give it the Hackage tarball that that is it.

**** Broken packages

Cases:

  * really broken: does not evaluate/does not compile, broken on all platforms, not with a particular compiler version, you can or can not tell that they are buggy: [[~/src/nix/pkgs/pkgs/development/haskell-modules/confuguration-hackage2nix.yaml]] -> ~broken-packages~
  * packages that are not on some platforms: [[~/src/nix/pkgs/pkgs/development/haskell-modules/confuguration-hackage2nix.yaml]] -> ~unsupported-platforms~
  There is no proper error handling in Nix, for example Windows packages maintainer came up with the solution depending on "unsupported-on-this-platform" package in those platforms.
  * packages that compile and fine, but they have weird/proprietary license - so not compiled on Hydra: [[~/src/nix/pkgs/pkgs/development/haskell-modules/confuguration-hackage2nix.yaml]] -> ~dont-distribute-packages~

Broken marking system should be graph forward resolving, but that is not implemented.
** Explicitly attaching a dependency

#+begin_src nix
  overlay = pkgs.lib.foldr pkgs.lib.composeExtensions (_: _: {}) [
    (self: super: with pkgs.haskell.lib; {
      aeson                 = addBuildDepend super.aeson self.contravariant;
    };

#+end_src

** Make package broken only until major release
#+begin_src nix
 broken = stdenv.isDarwin && stdenv.lib.versionOlder version "1.16.1";
#+end_src

** Haskell-Nix :immidiately:
:PROPERTIES:
:ID:       4a1056a8-eef7-4bbe-aa50-bb6560b92bff
:END:

*** Pinning /nixpkgs/

#+begin_src nix
let
bootstrap = import <nixpkgs> { };

nixpkgs = builtins.fromJSON (builtins.readFile ./nixpkgs.json);

src = bootstrap.fetchFromGitHub {
owner = "NixOS";
repo  = "nixpkgs";
inherit (nixpkgs) rev sha256;
};

pkgs = import src { };

in
pkgs.haskellPackages.callPackage ./default.nix { }
#+end_src

, where *nixpkgs.json*:

#+begin_src fish
nix-prefetch-git https://github.com/NixOS/nixpkgs.git <git_revision_hash> > nixpkgs.json
#+end_src

*** What builds a project:

#+begin_src nix
  ...callpackage ./default.nix {}
#+end_src

#+begin_src nix
  # default.nix
  # ---
  { mkDerivation, ...}"
  mkDerivation {}
#+end_src

So: release: callPackage ./default.nix -> mkDerivation.

*** Hydra requires a set of derivations provided, not a derivation.
*** nix-shell --attr project0.env --command 'cabal new-run' release2.nix
*** Project1: remove "We'll see the corresponding change in the `default.nix` generated by `cabal2nix`.

Just ask to run cabal2nix and provide file contence example.

*** Current Nix-Haskell curated package set: https://raw.githubusercontent.com/NixOS/nixpkgs/master/pkgs/development/haskell-modules/hackage-packages.nix
*** To get the default compiler version run: nix-instantiate --eval --expr '(import <nixpkgs> { }).ghc.version'
*** Get the Nix derivation from GitHub: cabal2nix https://github.com/<acc>/<project>.git --revision <hash> > turtle-2.nix
*** cabal2nix /path/to/<project> > <project>.nix
* Regenerating Haskell Nix package sets

** Package requirements

GHC
cabal-install
git


#+begin_src fish
#** Get Nixpkgs
git clone https://github.com/NixOS/nixpkgs.git nixpkgs
git clone -b hackage https://github.com/commercialhaskell/all-cabal-hashes hackage
git clone https://github.com/NixOS/cabal2nix.git
cd cabal2nix
nix-shell -p cabal2nix
cabal2nix --shell > default.nix .
nix-shell
mv ../hackage .
mv ../nixpkgs .
nix-env -iA nixpkgs.wget
nix-env -iA nixpkgs.dnsutils
cabal v2-build  # Produces cabal2nix & hackage2nix
for n in */preferred-versions; do (cat $n ; echo ) >> preferred-versions; done
cabal v2-run hackage2nix
#+end_src
