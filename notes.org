* Dictionary
** Profile
A general and convenient concept for realizing rollbacks.
** Database
/nix/var/nix/db/db.sqlite

Keeps track of the dependencies between derivations.

Made up of multiple "generations".
* Commands
** Show direct runtime dependencie
#+BEGIN_SRC shell
nix-store -q --references "$(command -v bassename)"
#+END_SRC

** Show reverse dependencies
#+BEGIN_SRC shell
nix-store -q --referrers "$(command -v basename)"
#+END_SRC

** Show catamorphed closure
#+BEGIN_SRC shell
nix-store -qR "$(command -v bassename)"
#+END_SRC

** Show tree of closure
#+BEGIN_SRC shell
nix-store -q --tree "$(command -v basename)"
#+END_SRC

** Recovering making rollback from store directory
#+BEGIN_SRC shell
/nix/store/<hash>-nix-<ver>/bin/nix-env --rollback
#+END_SRC

** Recover with reinstall from store directory
#+BEGIN_SRC shell
/nix/store/<hash>-nix-<ver>/bin/nix-env -i /nix/store/<hash>-nix-<ver>
#+END_SRC

* Operator
Boolean - ||, &&, !, builtins.div.
Relational - !=, ==, <, >, <=, >=.
e1 // e2 - e2 shadows values from e1
* Type
Simple types:
** Integer
** Floating point
** String
** Path
** Boolean
** Null
Complex types:
** List
** Set
s = { foo = "bar"; a-b = "str"; "key" = "value"; }
Access key/value: s.a-b
*** Argument set
mul = { a, b }
*** Recursive set
rec { a = "val"; b = "val"; }

** Function
*** if
*** let
Define local variables for inner expression.
*** with
Include includes attrribute set into expression.
*** lambda
**** One argument
x: x*2
**** Several arguments
y: (x: x*y)
**** Variadic arguments
mul = { a, b, ... }: a*b

* Different notes
** stdenvNoCC
without C compiler
** Check what closure references
nix-store -q --references path/
* Built-in function
currentSystem
isAttrs
attrNames
toString

* removeReferencesTo
Forces remove of the dependency. Even if Nix filter does not reduce dependency after compilation.
* Useful commands
** Show all derivation dependencies sorted by their closure size
nix path-info --json -rS *store path* | jq 'map(select(.closureSize > 1e6)) | sort_by(.closureSize) | map([.path, .closureSize/1e6])'
** Show all derivation dependencies sorted by their output size
nix path-info --json -rs *store path* | jq 'map(select(.narSize > 1e6)) | sort_by(.narSize) | map([.path, .narSize/1e6])'
** Show all closure dependencies in a tree form
nix-store -q --tree *store path*
** Build derivation from local NixPkgs description
nix-build {/home/pyro/src/nixpkgs} -A *attrName*
** Get total closure size
nix-store -qR *store path* | xargs du -s | cut -f 1 | xargs | sed -e 's/ /+/g'|bc
** Enter nix-shell environment to test/work with package
nix-shell {/home/pyro/src/nixpkgs} -A *attrName*
As comands enter next phases:
*** unpackPhase
*** cd *folder*
*** patchPhase
*** configurePhase
*** buildPhase

